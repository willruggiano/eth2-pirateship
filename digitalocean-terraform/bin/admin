#!/bin/zsh

die() {
    echo "$1"
    exit 1
}

COMMAND="help"
SUBCOMMAND="help"
SUBSUBCOMMAND="help"
HELP=false
DRYRUN=false
NODE_NAME="$NODE_NAME"
NODE_HOST="$NODE_HOST"
USE_TESTNET=false
INFURA_URL="https://mainnet.infura.io/v3/c90d5df6bff84e6b9c588beb56386752"
CREATE_WALLET=true
KEYS_DIR=""

for a in "$@"; do
    case "$a" in
        --dryrun)
            DRYRUN=true; shift
            ;;
        --testnet)
            shift; USE_TESTNET=true
            ;;
        --node)
            shift; NODE_NAME="$1"; shift
            ;;
        --host)
            shift; NODE_HOST="$1"; shift
            ;;
        --local-port)
            shift; LOCAL_PORT="$1"; shift
            ;;
        --remote-port)
            shift; REMOTE_PORT="$2"; shift
            ;;
        --help|-h)
            shift; HELP=true
            ;;
        docker)
            COMMAND="docker_cmd"; shift
            ;;
        geth)
            COMMAND="geth"; shift
            for ge in "$@"; do
                case "$ge" in
                    attach)
                        SUBCOMMAND="attach"; shift
                        ;;
                    logs)
                        SUBCOMMAND="logs"; shift
                        ;;
                    run)
                        SUBCOMMAND="run"; shift
                        ;;
                esac
            done
            ;;
        prysm)
            COMMAND="prysm"; shift
            for py in "$@"; do
                case "$py" in
                    beacon)
                        SUBCOMMAND="beacon"; shift
                        for b in "$@"; do
                            case "$b" in
                                --infura)
                                    shift; INFURA_URL="$2"; shift
                                    ;;
                                run)
                                    SUBSUBCOMMAND="run"; shift
                                    ;;
                                logs)
                                    SUBSUBCOMMAND="logs"; shift
                                    ;;
                            esac
                        done
                        ;;
                    validator)
                        SUBCOMMAND="validator"; shift
                        for v in "$@"; do
                            case "$v" in
                                --no-create-wallet)
                                    CREATE_WALLET=false; shift
                                    ;;
                                --keys-dir)
                                    shift; KEYS_DIR="$1"; shift
                                    ;;
                                init)
                                    SUBSUBCOMMAND="init"; shift
                                    ;;
                                logs)
                                    SUBSUBCOMMAND="logs"; shift
                                    ;;
                                run)
                                    SUBSUBCOMMAND="run"; shift
                                    ;;
                                exec)
                                    SUBSUBCOMMAND="exec"; shift
                                    ;;
                                tunnel)
                                    SUBSUBCOMMAND="tunnel"; shift
                                    ;;
                            esac
                        done
                        ;;
                esac
            done
            ;;
        grafana)
            COMMAND="grafana"; shift
            for gr in "$@"; do
                case "$gr" in
                    logs)
                        SUBCOMMAND="logs"; shift
                        ;;
                    run)
                        SUBCOMMAND="run"; shift
                        ;;
                esac
            done
            ;;
        prometheus)
            COMMAND="prometheus"; shift
            for p in "$@"; do
                case "$p" in
                    --prometheus-config)
                        shift; PROMETHEUS_CONFIG="$1"; shift
                        ;;
                    install)
                        SUBCOMMAND="install"; shift
                        ;;
                    run)
                        SUBCOMMAND="run"; shift
                        ;;
                    logs)
                        SUBCOMMAND="logs"; shift
                        ;;
                esac
            done
            ;;
        --)
            shift; OPTIONS="$@"; break
            ;;
    esac
done

CONTEXT="docker"
if [[ -n "$NODE_NAME" ]]; then
    DOCKER_CMD="docker --context $NODE_NAME"
elif [[ -z "$DOCKER_CONTEXT" ]] && [[ -z "$DOCKER_HOST" ]]; then
    echo "Must specify a node (via --node), or set the NODE_NAME environment variable, or configure Docker via either DOCKER_CONTEXT or DOCKER_HOST"
    exit 1
fi

##### Helper Functions #####

usage() {
    echo "usage: ./admin [--node <name>] [--host <hostname>] $1"
}

help() {
    usage "[geth | prysm | prometheus | grafana | docker] ..."
}

logs() {
    local command="$DOCKER_CMD logs $1 $OPTIONS"
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    else
        eval $command
    fi
}

tunnel() {
    [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]] && die "--local-port, --remote-port, and --host (or NODE_HOST) are required"
    local command="ssh -TNL ${1}:localhost:${2} root@${3}"
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    else
        echo "Tunneling to ${3}:${1}... press Ctrl-C to close"
        eval $command
    fi
}

##### Subcommands #####

docker_cmd() {
    local command="$DOCKER_CMD $OPTIONS"
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "docker ..."
    else
        eval $command
    fi
}

geth_help() {
    usage "geth [run | logs]"
}

geth_logs() {
    logs "geth"
}

geth_attach() {
    local command="$DOCKER_CMD run --rm -it -v /root/.eth1:/root/.ethereum ethereum/client-go:stable attach"
    if $USE_TESTNET; then
        command="$command ipc:///root/.ethereum/goerli/geth.ipc"
    fi
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "geth attach"
    else
        eval $command
    fi
}

geth_run() {
    local command="$DOCKER_CMD run --name geth -it --restart always -p 30303:30303 -v /root/.eth1:/root/.ethereum ethereum/client-go:stable --syncmode light --http --pcscdpath \"\""
    if $USE_TESTNET; then
        command="$command --goerli"
    fi
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "geth run"
    else
        eval $command
    fi
}

geth() {
    eval "geth_$SUBCOMMAND"
}

prysm_beacon_run() {
    local geth_path="/geth/geth.ipc"
    if $USE_TESTNET; then
        geth_path="/geth/goerli/geth.ipc"
    fi
    local command="$DOCKER_CMD run --name beacon-node -it --restart always -p 4000:4000 -p 13000:13000 -p 12000:12000/udp -v /root/.eth1:/geth -v /mnt/beaconchain:/data gcr.io/prysmaticlabs/prysm/beacon-chain:stable --accept-terms-of-use --datadir /data --rpc-host 0.0.0.0 --monitoring-host 0.0.0.0 --http-web3provider $geth_path --fallback-web3provider $INFURA_URL --accept-terms-of-use"
    if $USE_TESTNET; then
        command="$command --${CHAIN:-prater} --genesis-state /data/eth2-networks/shared/${CHAIN:-prater}/genesis.ssz"
    fi
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "prysm beacon run [--infura-url <url>]"
    else
        eval $command
    fi
}

prysm_beacon_logs() {
    logs "beacon-node"
}

prysm_beacon_help() {
    usage "prysm beacon [run]"
}

prysm_beacon() {
    eval "prysm_${SUBCOMMAND}_${SUBSUBCOMMAND}"
}

prysm_wallet_create() {
    local command="$DOCKER_CMD run --rm -it -v /root/.eth2/wallet:/wallet -v /root/.eth2/data:/data gcr.io/prysmaticlabs/prysm/validator:stable wallet create --wallet-dir /wallet --accept-terms-of-use"
    if $USE_TESTNET; then
        command="$command --${CHAIN:-prater}"
    fi
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "prysm validator init"
    else
        eval $command
    fi
}

prysm_account_import() {
    [[ ! -d "$KEYS_DIR" ]] || [[ -z "$NODE_HOST" ]] && die "--host or NODE_HOST along with --keys-dir are required"
    local mkdir_command="ssh root@$NODE_HOST mkdir -p /root/.eth2/"
    local scp_command="scp -r $(readlink -f $KEYS_DIR) root@$NODE_HOST:/root/.eth2/validator_keys"
    if $DRYRUN; then
        echo "Would run:"
        echo "$mkdir_command"
        echo "$scp_command"
    else
        eval $mkdir_command
        eval $scp_command
    fi
    local command="$DOCKER_CMD run --rm -it -v /root/.eth2/wallet:/wallet -v /root/.eth2/validator_keys:/keys gcr.io/prysmaticlabs/prysm/validator:stable accounts import --keys-dir /keys --wallet-dir /wallet --accept-terms-of-use"
    if $USE_TESTNET; then
        command="$command --${CHAIN:-prater}"
    fi
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "prysm account import"
    else
        eval $command
    fi
}

prysm_validator_init() {
    if $CREATE_WALLET; then
        prysm_wallet_create
    fi
    prysm_account_import
}

prysm_validator_run() {
    local command="$DOCKER_CMD run --name validator -it --restart always -v /root/.eth2/wallet:/wallet -v /root/.eth2/data:/data --network host gcr.io/prysmaticlabs/prysm/validator:stable --beacon-rpc-provider 127.0.0.1:4000 --wallet-dir /wallet --datadir /data --web --accept-terms-of-use"
    if $USE_TESTNET; then
        command="$command --${CHAIN:-prater}"
    fi
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "prysm validator run"
    else
        eval $command
    fi
}

prysm_validator_exec() {
    local command="$DOCKER_CMD run --rm -it -v /root/.eth2/wallet:/wallet -v /root/.eth2/data:/data --network host gcr.io/prysmaticlabs/prysm/validator:stable $OPTIONS --wallet-dir /wallet --accept-terms-of-use"
    if $USE_TESTNET; then
        command="$command --${CHAIN:-prater}"
    fi
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "prysm validator exec -- ..."
    else
        eval $command
    fi
}

prysm_validator_tunnel() {
    if $HELP; then
        usage "prysm validator tunnel [--local-port] [--remote-port]"
    else
        tunnel ${LOCAL_PORT:-7500} ${REMOTE_PORT:-7500} $NODE_HOST
    fi
}

prysm_validator_logs() {
    logs "validator"
}

prysm_validator_help() {
    echo "prysm validator [init | run]"
}

prysm_validator() {
    eval "prysm_${SUBCOMMAND}_${SUBSUBCOMMAND}"
}

prysm_help() {
    usage "prysm [beacon | validator]"
}

prysm() {
    eval "prysm_$SUBCOMMAND"
}

prometheus_install() {
    [[ -z "$NODE_HOST" ]] || [[ ! -f "$PROMETHEUS_CONFIG" ]] && die "--host or NODE_HOST must be specified, along with --prometheus-config"
    local command="scp $(readlink -f $PROMETHEUS_CONFIG) root@$NODE_HOST:/root/.prometheus/prometheus.yml"
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "prometheus install [--prometheus-config <path>]"
    else
        eval "ssh root@$NODE_HOST mkdir -p /root/.prometheus"
        eval $command
    fi
}

prometheus_run() {
    local command="$DOCKER_CMD run --name prometheus -it --restart always -p 9090:9090 -v /root/.prometheus:/etc/prometheus prom/prometheus"
    if $DRYRUN; then
        echo "Would run:"
        echo "$command"
    elif $HELP; then
        usage "prometheus run"
    else
        eval $command
    fi
}

prometheus_logs() {
    logs "prometheus"
}

prometheus_help() {
    usage "prometheus [install --prometheus-config <path> | run | help]"
}

prometheus() {
    eval "prometheus_$SUBCOMMAND"
}

grafana_run() {
    local command="$DOCKER_CMD run --name grafana -d --restart always -p 3000:3000 grafana/grafana"
    if $DRYRUN; then
        echo "Would run:"
        echo $command
    elif $HELP; then
        usage "grafana run"
    else
        eval $command
    fi
}

grafana_help() {
    usage "grafana [run]"
}

grafana() {
    eval "grafana_$SUBCOMMAND"
}

$COMMAND

